var sereth_BIN = "0x6080604052620777776001026000906000191690557f7261614d61726b0000000000000000000000000000000000000000000000000060019060001916905560106001026002906000191690556060604051908101604052806000546000191660001916815260200160015460001916600019168152602001600254600019166000191681525060039060036100969291906100b3565b50600060065560006007553480156100ad57600080fd5b5061011e565b82600381019282156100e8579160200282015b828111156100e75782518290600019169055916020019190600101906100c6565b5b5090506100f591906100f9565b5090565b61011b91905b808211156101175760008160009055506001016100ff565b5090565b90565b61089d8061012d6000396000f30060806040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063152227ad146100935780631ae3304a14610101578063c32bc35614610154578063d1602737146101a6578063d59fe939146101f8578063dcfef6fb1461022a578063dde5aece146102b8578063fbeaa64014610346575b600080fd5b34801561009f57600080fd5b506100e36004803603810190808060600190600380602002604051908101604052809291908260036020028082843782019150505050509192919290505050610398565b60405180826000191660001916815260200191505060405180910390f35b34801561010d57600080fd5b506101166103b5565b6040518082600360200280838360005b83811015610141578082015181840152602081019050610126565b5050505090500191505060405180910390f35b34801561016057600080fd5b506101a46004803603810190808060600190600380602002604051908101604052809291908260036020028082843782019150505050509192919290505050610403565b005b3480156101b257600080fd5b506101f660048036038101908080606001906003806020026040519081016040528092919082600360200280828437820191505050505091929192905050506104ba565b005b34801561020457600080fd5b5061020d61060b565b604051808381526020018281526020019250505060405180910390f35b34801561023657600080fd5b5061027a600480360381019080806060019060038060200260405190810160405280929190826003602002808284378201915050505050919291929050505061061c565b6040518082600360200280838360005b838110156102a557808201518184015260208101905061028a565b5050505090500191505060405180910390f35b3480156102c457600080fd5b50610308600480360381019080806060019060038060200260405190810160405280929190826003602002808284378201915050505050919291929050505061062c565b6040518082600360200280838360005b83811015610333578082015181840152602081019050610318565b5050505090500191505060405180910390f35b34801561035257600080fd5b50610396600480360381019080806060019060038060200260405190810160405280929190826003602002808284378201915050505050919291929050505061064e565b005b60008160026003811015156103a957fe5b60200201519050919050565b6103bd6107e3565b600380806020026040519081016040528092919082600380156103f9576020028201915b815460001916815260200190600101908083116103e1575b5050505050905090565b6003600260038110151561041357fe5b015460405180826000191660001916815260200191505060405180910390206000191681600260038110151561044557fe5b602002015160405180826000191660001916815260200191505060405180910390206000191614156104b7576006600081548092919060010191905055503373ffffffffffffffffffffffffffffffffffffffff16600102600360006003811015156104ad57fe5b0181600019169055505b50565b600360016003811015156104ca57fe5b01546040518082600019166000191681526020019150506040518091039020600019168160016003811015156104fc57fe5b60200201516040518082600019166000191681526020019150506040518091039020600019161415610608576007600081548092919060010191905055503373ffffffffffffffffffffffffffffffffffffffff166001026003600060038110151561056457fe5b01816000191690555080600160038110151561057c57fe5b602002015181600260038110151561059057fe5b60200201516040518083600019166000191681526020018260001916600019168152602001925050506040518091039020600360016003811015156105d157fe5b0181600019169055508060026003811015156105e957fe5b6020020151600360026003811015156105fe57fe5b0181600019169055505b50565b600080600654600754915091509091565b6106246107e3565b819050919050565b6106346107e3565b816003906003610645929190610806565b50819050919050565b6003600160038110151561065e57fe5b015460405180826000191660001916815260200191505060405180910390206000191681600160038110151561069057fe5b60200201516040518082600019166000191681526020019150506040518091039020600019161480156107285750600360026003811015156106ce57fe5b015460405180826000191660001916815260200191505060405180910390206000191681600260038110151561070057fe5b6020020151604051808260001916600019168152602001915050604051809103902060001916145b156107e0576006600081548092919060010191905055503373ffffffffffffffffffffffffffffffffffffffff166001026003600060038110151561076957fe5b01816000191690555080600160038110151561078157fe5b602002015181600260038110151561079557fe5b60200201516040518083600019166000191681526020018260001916600019168152602001925050506040518091039020600360016003811015156107d657fe5b0181600019169055505b50565b606060405190810160405280600390602082028038833980820191505090505090565b826003810192821561083b579160200282015b8281111561083a578251829060001916905591602001919060010190610819565b5b509050610848919061084c565b5090565b61086e91905b8082111561086a576000816000905550600101610852565b5090565b905600a165627a7a723058206a71b6d8fb18442c39dc1afc1968bf3c8dd5f403c9d765aee7d2b32aa278ff9c0029";

var sereth_ABI = [{"constant":true,"inputs":[{"name":"raa","type":"bytes32[3]"}],"name":"get","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[],"name":"getAMV_blk","outputs":[{"name":"","type":"bytes32[3]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"offer","type":"bytes32[3]"}],"name":"buyL","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"amv","type":"bytes32[3]"}],"name":"set","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"nTX","outputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"raa","type":"bytes32[3]"}],"name":"getAMV","outputs":[{"name":"","type":"bytes32[3]"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":false,"inputs":[{"name":"raa","type":"bytes32[3]"}],"name":"setAMV_blk","outputs":[{"name":"","type":"bytes32[3]"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"offer","type":"bytes32[3]"}],"name":"buyS","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}] ;

var sereth_SRC = "pragma solidity ^0.4.24; // Sereth contract provides a consistent intra-block view of protected state variable p and serializes operations on it. contract Sereth { bytes32 s0 = 0x0000000000000000000000000000000000000000000000000000000000077777; bytes32 s1 = 'raaMark'; bytes32 s2 = 0x0000000000000000000000000000000000000000000000000000000000000010; bytes32[3] p = [s0, s1, s2]; uint256 nBuy = 0; uint256 nSet = 0; // Mark, Set and Get are methods in the Hash-Mark-Set transactional data structure. function mark(bytes32[3] raa) private pure returns(bytes32) { return raa[1]; } function set(bytes32[3] amv) public { // mark needs to match the intra-block mark, which is likely if obtained recently if (keccak256(amv[1]) == keccak256(p[1])) { // mark valid, set new mark and value nSet++; p[0] = bytes32(msg.sender); p[1] = keccak256(amv[1], amv[2]); p[2] = amv[2]; } } function get(bytes32[3] raa) public pure returns(bytes32) { return raa[2]; } function getAMV(bytes32[3] raa) public pure returns(bytes32[3]) { return raa; } // Get and Set used to change block state of descriptor object p for tests or to reinitialize. // Use contract owner only modifier to restrict access in production deployments. function getAMV_blk() public view returns(bytes32[3]) { return p; } function setAMV_blk(bytes32[3] raa) public returns (bytes32[3]) { p = raa; return raa; } // This section demonstrates a dynamic pricing use case for the Hash-Mark-Set transactional data structure function buyS(bytes32[3] offer) public { if ((keccak256(offer[1]) == keccak256(p[1])) && (keccak256(offer[2]) == keccak256(p[2]))) { // mark and price are valid: execute serialized buy order nBuy++; p[0] = bytes32(msg.sender); p[1] = keccak256(offer[1], offer[2]); } } function buyL(bytes32[3] offer) public { if (keccak256(offer[2]) == keccak256(p[2])) { // price is valid: execute linearized buy order nBuy++; p[0] = bytes32(msg.sender); } } function nTX() public view returns(uint256, uint256) { return (nBuy, nSet); } }";

