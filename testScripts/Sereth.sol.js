var sereth_BIN = "0x6080604052620777776001026000906000191690557f7261614d61726b0000000000000000000000000000000000000000000000000060019060001916905560106001026002906000191690556060604051908101604052806000546000191660001916815260200160015460001916600019168152602001600254600019166000191681525060039060036100969291906100ae565b5060006006553480156100a857600080fd5b50610119565b82600381019282156100e3579160200282015b828111156100e25782518290600019169055916020019190600101906100c1565b5b5090506100f091906100f4565b5090565b61011691905b808211156101125760008160009055506001016100fa565b5090565b90565b61076e806101286000396000f300608060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063152227ad146100885780631ae3304a146100f65780633f91e23814610149578063a45225c51461019b578063d1602737146101c6578063dcfef6fb14610218578063dde5aece146102a6575b600080fd5b34801561009457600080fd5b506100d86004803603810190808060600190600380602002604051908101604052809291908260036020028082843782019150505050509192919290505050610334565b60405180826000191660001916815260200191505060405180910390f35b34801561010257600080fd5b5061010b610351565b6040518082600360200280838360005b8381101561013657808201518184015260208101905061011b565b5050505090500191505060405180910390f35b34801561015557600080fd5b50610199600480360381019080806060019060038060200260405190810160405280929190826003602002808284378201915050505050919291929050505061039f565b005b3480156101a757600080fd5b506101b0610534565b6040518082815260200191505060405180910390f35b3480156101d257600080fd5b50610216600480360381019080806060019060038060200260405190810160405280929190826003602002808284378201915050505050919291929050505061053e565b005b34801561022457600080fd5b506102686004803603810190808060600190600380602002604051908101604052809291908260036020028082843782019150505050509192919290505050610682565b6040518082600360200280838360005b83811015610293578082015181840152602081019050610278565b5050505090500191505060405180910390f35b3480156102b257600080fd5b506102f66004803603810190808060600190600380602002604051908101604052809291908260036020028082843782019150505050509192919290505050610692565b6040518082600360200280838360005b83811015610321578082015181840152602081019050610306565b5050505090500191505060405180910390f35b600081600260038110151561034557fe5b60200201519050919050565b6103596106b4565b60038080602002604051908101604052809291908260038015610395576020028201915b8154600019168152602001906001019080831161037d575b5050505050905090565b600360016003811015156103af57fe5b01546040518082600019166000191681526020019150506040518091039020600019168160016003811015156103e157fe5b602002015160405180826000191660001916815260200191505060405180910390206000191614801561047957506003600260038110151561041f57fe5b015460405180826000191660001916815260200191505060405180910390206000191681600260038110151561045157fe5b6020020151604051808260001916600019168152602001915050604051809103902060001916145b15610531576006600081548092919060010191905055503373ffffffffffffffffffffffffffffffffffffffff16600102600360006003811015156104ba57fe5b0181600019169055508060016003811015156104d257fe5b60200201518160026003811015156104e657fe5b602002015160405180836000191660001916815260200182600019166000191681526020019250505060405180910390206003600160038110151561052757fe5b0181600019169055505b50565b6000600654905090565b6003600160038110151561054e57fe5b015460405180826000191660001916815260200191505060405180910390206000191681600160038110151561058057fe5b6020020151604051808260001916600019168152602001915050604051809103902060001916141561067e573373ffffffffffffffffffffffffffffffffffffffff16600102600360006003811015156105d657fe5b0181600019169055508060016003811015156105ee57fe5b602002015181600260038110151561060257fe5b602002015160405180836000191660001916815260200182600019166000191681526020019250505060405180910390206003600160038110151561064357fe5b01816000191690555080600260038110151561065b57fe5b60200201516003600260038110151561067057fe5b01816000191690555061067f565b5b50565b61068a6106b4565b819050919050565b61069a6106b4565b8160039060036106ab9291906106d7565b50819050919050565b606060405190810160405280600390602082028038833980820191505090505090565b826003810192821561070c579160200282015b8281111561070b5782518290600019169055916020019190600101906106ea565b5b509050610719919061071d565b5090565b61073f91905b8082111561073b576000816000905550600101610723565b5090565b905600a165627a7a72305820c93f9f84086905815307b2026a140bbd1948d1415b67a5930eb4f8d8cea2129b0029";

var sereth_ABI = [{"constant":true,"inputs":[{"name":"raa","type":"bytes32[3]"}],"name":"get","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[],"name":"getAMV_blk","outputs":[{"name":"","type":"bytes32[3]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"offer","type":"bytes32[3]"}],"name":"buy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"qtySold","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"amv","type":"bytes32[3]"}],"name":"set","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"raa","type":"bytes32[3]"}],"name":"getAMV","outputs":[{"name":"","type":"bytes32[3]"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":false,"inputs":[{"name":"raa","type":"bytes32[3]"}],"name":"setAMV_blk","outputs":[{"name":"","type":"bytes32[3]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}] ;

var sereth_SRC = "pragma solidity ^0.4.20; // Sereth contract provides a consistent intra-block view of protected state variable p and serializes operations on it. contract Sereth { bytes32 s0 = 0x0000000000000000000000000000000000000000000000000000000000077777; bytes32 s1 = 'raaMark'; bytes32 s2 = 0x0000000000000000000000000000000000000000000000000000000000000010; bytes32[3] p = [s0, s1, s2]; uint256 sold = 0; // Mark, Set and Get are methods in the Hash-Mark-Set transactional data structure. function mark(bytes32[3] raa) private pure returns(bytes32) { return raa[1]; } function set(bytes32[3] amv) public { // mark needs to match the intra-block mark, which is likely if obtained recently if (keccak256(amv[1]) == keccak256(p[1])) { // mark valid, set new mark and value p[0] = bytes32(msg.sender); p[1] = keccak256(amv[1], amv[2]); p[2] = amv[2]; } else { // mark not valid, nothing to do } } function get(bytes32[3] raa) public pure returns(bytes32) { return raa[2]; } function getAMV(bytes32[3] raa) public pure returns(bytes32[3]) { return raa; } // Get and Set used to change block state of descriptor object p for tests or to reinitialize. // Use contract owner only modifier to restrict access in production deployments. function getAMV_blk() public view returns(bytes32[3]) { return p; } function setAMV_blk(bytes32[3] raa) public returns (bytes32[3]) { p = raa; return raa; } // This section demonstrates a dynamic pricing use case for the Hash-Mark-Set transactional data structure function buy(bytes32[3] offer) public { if ((keccak256(offer[1]) == keccak256(p[1])) && (keccak256(offer[2]) == keccak256(p[2]))) { // mark and price are valid: execute serialized buy order sold++; p[0] = bytes32(msg.sender); p[1] = keccak256(offer[1], offer[2]); } } /bin /boot /dev /etc /home /initrd.img /initrd.img.old /lib /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var /vmlinuz /vmlinuz.old function buyL(bytes32[3] offer) public { if (keccak256(offer[2]) == keccak256(p[2])) { // price is valid: execute linearized buy order sold++; p[0] = bytes32(msg.sender); p[1] = keccak256(offer[1], offer[2]); } } apps/ backup/ eth-private-net/ go-ethereum/ htdocs/ mp/ patches/ pn2/ sereth/ sereth_broken/ serethp/ stack/ target/ transaction_test/ function qtySold() public view returns(uint256) { return sold; } }";

